#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace hachsharanetweb
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HachsharaNET")]
	public partial class hacDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAssign(Assign instance);
    partial void UpdateAssign(Assign instance);
    partial void DeleteAssign(Assign instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertCourseAnswer(CourseAnswer instance);
    partial void UpdateCourseAnswer(CourseAnswer instance);
    partial void DeleteCourseAnswer(CourseAnswer instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertCourseSession(CourseSession instance);
    partial void UpdateCourseSession(CourseSession instance);
    partial void DeleteCourseSession(CourseSession instance);
    partial void InsertInstitute(Institute instance);
    partial void UpdateInstitute(Institute instance);
    partial void DeleteInstitute(Institute instance);
    partial void InsertJobSeeker(JobSeeker instance);
    partial void UpdateJobSeeker(JobSeeker instance);
    partial void DeleteJobSeeker(JobSeeker instance);
    partial void InsertJobSeekersAnswer(JobSeekersAnswer instance);
    partial void UpdateJobSeekersAnswer(JobSeekersAnswer instance);
    partial void DeleteJobSeekersAnswer(JobSeekersAnswer instance);
    partial void InsertMatchingQuestion(MatchingQuestion instance);
    partial void UpdateMatchingQuestion(MatchingQuestion instance);
    partial void DeleteMatchingQuestion(MatchingQuestion instance);
    partial void InsertQuestionsType(QuestionsType instance);
    partial void UpdateQuestionsType(QuestionsType instance);
    partial void DeleteQuestionsType(QuestionsType instance);
    partial void InsertStatuse(Statuse instance);
    partial void UpdateStatuse(Statuse instance);
    partial void DeleteStatuse(Statuse instance);
    #endregion
		
		public hacDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["HachsharaNETConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public hacDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public hacDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public hacDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public hacDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Assign> Assigns
		{
			get
			{
				return this.GetTable<Assign>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<CourseAnswer> CourseAnswers
		{
			get
			{
				return this.GetTable<CourseAnswer>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<CourseSession> CourseSessions
		{
			get
			{
				return this.GetTable<CourseSession>();
			}
		}
		
		public System.Data.Linq.Table<Institute> Institutes
		{
			get
			{
				return this.GetTable<Institute>();
			}
		}
		
		public System.Data.Linq.Table<JobSeeker> JobSeekers
		{
			get
			{
				return this.GetTable<JobSeeker>();
			}
		}
		
		public System.Data.Linq.Table<JobSeekersAnswer> JobSeekersAnswers
		{
			get
			{
				return this.GetTable<JobSeekersAnswer>();
			}
		}
		
		public System.Data.Linq.Table<MatchingQuestion> MatchingQuestions
		{
			get
			{
				return this.GetTable<MatchingQuestion>();
			}
		}
		
		public System.Data.Linq.Table<QuestionsType> QuestionsTypes
		{
			get
			{
				return this.GetTable<QuestionsType>();
			}
		}
		
		public System.Data.Linq.Table<Statuse> Statuses
		{
			get
			{
				return this.GetTable<Statuse>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Assigns")]
	public partial class Assign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseID;
		
		private int _SessionID;
		
		private int _SeekerID;
		
		private int _UserID;
		
		private System.Nullable<System.DateTime> _AssignDate;
		
		private EntityRef<User> _User;
		
		private EntityRef<CourseSession> _CourseSession;
		
		private EntityRef<JobSeeker> _JobSeeker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnSessionIDChanging(int value);
    partial void OnSessionIDChanged();
    partial void OnSeekerIDChanging(int value);
    partial void OnSeekerIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnAssignDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAssignDateChanged();
    #endregion
		
		public Assign()
		{
			this._User = default(EntityRef<User>);
			this._CourseSession = default(EntityRef<CourseSession>);
			this._JobSeeker = default(EntityRef<JobSeeker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._CourseSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					if (this._CourseSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeekerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SeekerID
		{
			get
			{
				return this._SeekerID;
			}
			set
			{
				if ((this._SeekerID != value))
				{
					if (this._JobSeeker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeekerIDChanging(value);
					this.SendPropertyChanging();
					this._SeekerID = value;
					this.SendPropertyChanged("SeekerID");
					this.OnSeekerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignDate", DbType="Date")]
		public System.Nullable<System.DateTime> AssignDate
		{
			get
			{
				return this._AssignDate;
			}
			set
			{
				if ((this._AssignDate != value))
				{
					this.OnAssignDateChanging(value);
					this.SendPropertyChanging();
					this._AssignDate = value;
					this.SendPropertyChanged("AssignDate");
					this.OnAssignDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Assign", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Assigns.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Assigns.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseSession_Assign", Storage="_CourseSession", ThisKey="CourseID,SessionID", OtherKey="CourseID,SessionID", IsForeignKey=true)]
		public CourseSession CourseSession
		{
			get
			{
				return this._CourseSession.Entity;
			}
			set
			{
				CourseSession previousValue = this._CourseSession.Entity;
				if (((previousValue != value) 
							|| (this._CourseSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseSession.Entity = null;
						previousValue.Assigns.Remove(this);
					}
					this._CourseSession.Entity = value;
					if ((value != null))
					{
						value.Assigns.Add(this);
						this._CourseID = value.CourseID;
						this._SessionID = value.SessionID;
					}
					else
					{
						this._CourseID = default(int);
						this._SessionID = default(int);
					}
					this.SendPropertyChanged("CourseSession");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobSeeker_Assign", Storage="_JobSeeker", ThisKey="SeekerID", OtherKey="ID", IsForeignKey=true)]
		public JobSeeker JobSeeker
		{
			get
			{
				return this._JobSeeker.Entity;
			}
			set
			{
				JobSeeker previousValue = this._JobSeeker.Entity;
				if (((previousValue != value) 
							|| (this._JobSeeker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobSeeker.Entity = null;
						previousValue.Assigns.Remove(this);
					}
					this._JobSeeker.Entity = value;
					if ((value != null))
					{
						value.Assigns.Add(this);
						this._SeekerID = value.ID;
					}
					else
					{
						this._SeekerID = default(int);
					}
					this.SendPropertyChanged("JobSeeker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Type;
		
		private System.Nullable<int> _InstituteID;
		
		private string _UserName;
		
		private string _Password;
		
		private EntitySet<Assign> _Assigns;
		
		private EntitySet<JobSeeker> _JobSeekers;
		
		private EntityRef<Institute> _Institute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnInstituteIDChanging(System.Nullable<int> value);
    partial void OnInstituteIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public User()
		{
			this._Assigns = new EntitySet<Assign>(new Action<Assign>(this.attach_Assigns), new Action<Assign>(this.detach_Assigns));
			this._JobSeekers = new EntitySet<JobSeeker>(new Action<JobSeeker>(this.attach_JobSeekers), new Action<JobSeeker>(this.detach_JobSeekers));
			this._Institute = default(EntityRef<Institute>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstituteID", DbType="Int")]
		public System.Nullable<int> InstituteID
		{
			get
			{
				return this._InstituteID;
			}
			set
			{
				if ((this._InstituteID != value))
				{
					if (this._Institute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstituteIDChanging(value);
					this.SendPropertyChanging();
					this._InstituteID = value;
					this.SendPropertyChanged("InstituteID");
					this.OnInstituteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Assign", Storage="_Assigns", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Assign> Assigns
		{
			get
			{
				return this._Assigns;
			}
			set
			{
				this._Assigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_JobSeeker", Storage="_JobSeekers", ThisKey="ID", OtherKey="ResponsibleUserID")]
		public EntitySet<JobSeeker> JobSeekers
		{
			get
			{
				return this._JobSeekers;
			}
			set
			{
				this._JobSeekers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Institute_User", Storage="_Institute", ThisKey="InstituteID", OtherKey="InstituteID", IsForeignKey=true)]
		public Institute Institute
		{
			get
			{
				return this._Institute.Entity;
			}
			set
			{
				Institute previousValue = this._Institute.Entity;
				if (((previousValue != value) 
							|| (this._Institute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Institute.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Institute.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._InstituteID = value.InstituteID;
					}
					else
					{
						this._InstituteID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Institute");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assigns(Assign entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Assigns(Assign entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_JobSeekers(JobSeeker entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_JobSeekers(JobSeeker entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseAnswers")]
	public partial class CourseAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseID;
		
		private int _QuestionID;
		
		private System.Nullable<bool> _Answer;
		
		private EntityRef<JobSeeker> _JobSeeker;
		
		private EntityRef<MatchingQuestion> _MatchingQuestion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnAnswerChanging(System.Nullable<bool> value);
    partial void OnAnswerChanged();
    #endregion
		
		public CourseAnswer()
		{
			this._JobSeeker = default(EntityRef<JobSeeker>);
			this._MatchingQuestion = default(EntityRef<MatchingQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._JobSeeker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._MatchingQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="Bit")]
		public System.Nullable<bool> Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobSeeker_CourseAnswer", Storage="_JobSeeker", ThisKey="CourseID", OtherKey="ID", IsForeignKey=true)]
		public JobSeeker JobSeeker
		{
			get
			{
				return this._JobSeeker.Entity;
			}
			set
			{
				JobSeeker previousValue = this._JobSeeker.Entity;
				if (((previousValue != value) 
							|| (this._JobSeeker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobSeeker.Entity = null;
						previousValue.CourseAnswers.Remove(this);
					}
					this._JobSeeker.Entity = value;
					if ((value != null))
					{
						value.CourseAnswers.Add(this);
						this._CourseID = value.ID;
					}
					else
					{
						this._CourseID = default(int);
					}
					this.SendPropertyChanged("JobSeeker");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchingQuestion_CourseAnswer", Storage="_MatchingQuestion", ThisKey="QuestionID", OtherKey="qID", IsForeignKey=true)]
		public MatchingQuestion MatchingQuestion
		{
			get
			{
				return this._MatchingQuestion.Entity;
			}
			set
			{
				MatchingQuestion previousValue = this._MatchingQuestion.Entity;
				if (((previousValue != value) 
							|| (this._MatchingQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchingQuestion.Entity = null;
						previousValue.CourseAnswers.Remove(this);
					}
					this._MatchingQuestion.Entity = value;
					if ((value != null))
					{
						value.CourseAnswers.Add(this);
						this._QuestionID = value.qID;
					}
					else
					{
						this._QuestionID = default(int);
					}
					this.SendPropertyChanged("MatchingQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Courses")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseID;
		
		private string _CourseName;
		
		private string _Source;
		
		private System.Nullable<bool> _Approved;
		
		private string _ManagerFirstName;
		
		private string _ManagerLastName;
		
		private System.Nullable<int> _InstituteID;
		
		private EntitySet<CourseSession> _CourseSessions;
		
		private EntityRef<Institute> _Institute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnCourseNameChanging(string value);
    partial void OnCourseNameChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnApprovedChanging(System.Nullable<bool> value);
    partial void OnApprovedChanged();
    partial void OnManagerFirstNameChanging(string value);
    partial void OnManagerFirstNameChanged();
    partial void OnManagerLastNameChanging(string value);
    partial void OnManagerLastNameChanged();
    partial void OnInstituteIDChanging(System.Nullable<int> value);
    partial void OnInstituteIDChanged();
    #endregion
		
		public Course()
		{
			this._CourseSessions = new EntitySet<CourseSession>(new Action<CourseSession>(this.attach_CourseSessions), new Action<CourseSession>(this.detach_CourseSessions));
			this._Institute = default(EntityRef<Institute>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseName", DbType="NVarChar(100)")]
		public string CourseName
		{
			get
			{
				return this._CourseName;
			}
			set
			{
				if ((this._CourseName != value))
				{
					this.OnCourseNameChanging(value);
					this.SendPropertyChanging();
					this._CourseName = value;
					this.SendPropertyChanged("CourseName");
					this.OnCourseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="NVarChar(50)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approved", DbType="Bit")]
		public System.Nullable<bool> Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerFirstName", DbType="NVarChar(50)")]
		public string ManagerFirstName
		{
			get
			{
				return this._ManagerFirstName;
			}
			set
			{
				if ((this._ManagerFirstName != value))
				{
					this.OnManagerFirstNameChanging(value);
					this.SendPropertyChanging();
					this._ManagerFirstName = value;
					this.SendPropertyChanged("ManagerFirstName");
					this.OnManagerFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerLastName", DbType="NVarChar(50)")]
		public string ManagerLastName
		{
			get
			{
				return this._ManagerLastName;
			}
			set
			{
				if ((this._ManagerLastName != value))
				{
					this.OnManagerLastNameChanging(value);
					this.SendPropertyChanging();
					this._ManagerLastName = value;
					this.SendPropertyChanged("ManagerLastName");
					this.OnManagerLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstituteID", DbType="Int")]
		public System.Nullable<int> InstituteID
		{
			get
			{
				return this._InstituteID;
			}
			set
			{
				if ((this._InstituteID != value))
				{
					if (this._Institute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstituteIDChanging(value);
					this.SendPropertyChanging();
					this._InstituteID = value;
					this.SendPropertyChanged("InstituteID");
					this.OnInstituteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseSession", Storage="_CourseSessions", ThisKey="CourseID", OtherKey="CourseID")]
		public EntitySet<CourseSession> CourseSessions
		{
			get
			{
				return this._CourseSessions;
			}
			set
			{
				this._CourseSessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Institute_Course", Storage="_Institute", ThisKey="InstituteID", OtherKey="InstituteID", IsForeignKey=true)]
		public Institute Institute
		{
			get
			{
				return this._Institute.Entity;
			}
			set
			{
				Institute previousValue = this._Institute.Entity;
				if (((previousValue != value) 
							|| (this._Institute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Institute.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Institute.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._InstituteID = value.InstituteID;
					}
					else
					{
						this._InstituteID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Institute");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseSessions(CourseSession entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CourseSessions(CourseSession entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseSessions")]
	public partial class CourseSession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseID;
		
		private int _SessionID;
		
		private string _SessionNAME;
		
		private System.Nullable<int> _MaxNumOfParticipants;
		
		private System.Nullable<int> _MinNumOfParticipants;
		
		private string _District;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private string _SessionStatus;
		
		private EntitySet<Assign> _Assigns;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Statuse> _Statuse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnSessionIDChanging(int value);
    partial void OnSessionIDChanged();
    partial void OnSessionNAMEChanging(string value);
    partial void OnSessionNAMEChanged();
    partial void OnMaxNumOfParticipantsChanging(System.Nullable<int> value);
    partial void OnMaxNumOfParticipantsChanged();
    partial void OnMinNumOfParticipantsChanging(System.Nullable<int> value);
    partial void OnMinNumOfParticipantsChanged();
    partial void OnDistrictChanging(string value);
    partial void OnDistrictChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnSessionStatusChanging(string value);
    partial void OnSessionStatusChanged();
    #endregion
		
		public CourseSession()
		{
			this._Assigns = new EntitySet<Assign>(new Action<Assign>(this.attach_Assigns), new Action<Assign>(this.detach_Assigns));
			this._Course = default(EntityRef<Course>);
			this._Statuse = default(EntityRef<Statuse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionNAME", DbType="NVarChar(50)")]
		public string SessionNAME
		{
			get
			{
				return this._SessionNAME;
			}
			set
			{
				if ((this._SessionNAME != value))
				{
					this.OnSessionNAMEChanging(value);
					this.SendPropertyChanging();
					this._SessionNAME = value;
					this.SendPropertyChanged("SessionNAME");
					this.OnSessionNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxNumOfParticipants", DbType="Int")]
		public System.Nullable<int> MaxNumOfParticipants
		{
			get
			{
				return this._MaxNumOfParticipants;
			}
			set
			{
				if ((this._MaxNumOfParticipants != value))
				{
					this.OnMaxNumOfParticipantsChanging(value);
					this.SendPropertyChanging();
					this._MaxNumOfParticipants = value;
					this.SendPropertyChanged("MaxNumOfParticipants");
					this.OnMaxNumOfParticipantsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinNumOfParticipants", DbType="Int")]
		public System.Nullable<int> MinNumOfParticipants
		{
			get
			{
				return this._MinNumOfParticipants;
			}
			set
			{
				if ((this._MinNumOfParticipants != value))
				{
					this.OnMinNumOfParticipantsChanging(value);
					this.SendPropertyChanging();
					this._MinNumOfParticipants = value;
					this.SendPropertyChanged("MinNumOfParticipants");
					this.OnMinNumOfParticipantsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District", DbType="NVarChar(50)")]
		public string District
		{
			get
			{
				return this._District;
			}
			set
			{
				if ((this._District != value))
				{
					this.OnDistrictChanging(value);
					this.SendPropertyChanging();
					this._District = value;
					this.SendPropertyChanged("District");
					this.OnDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionStatus", DbType="NVarChar(50)")]
		public string SessionStatus
		{
			get
			{
				return this._SessionStatus;
			}
			set
			{
				if ((this._SessionStatus != value))
				{
					if (this._Statuse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionStatusChanging(value);
					this.SendPropertyChanging();
					this._SessionStatus = value;
					this.SendPropertyChanged("SessionStatus");
					this.OnSessionStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseSession_Assign", Storage="_Assigns", ThisKey="CourseID,SessionID", OtherKey="CourseID,SessionID")]
		public EntitySet<Assign> Assigns
		{
			get
			{
				return this._Assigns;
			}
			set
			{
				this._Assigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseSession", Storage="_Course", ThisKey="CourseID", OtherKey="CourseID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CourseSessions.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CourseSessions.Add(this);
						this._CourseID = value.CourseID;
					}
					else
					{
						this._CourseID = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Statuse_CourseSession", Storage="_Statuse", ThisKey="SessionStatus", OtherKey="Status", IsForeignKey=true)]
		public Statuse Statuse
		{
			get
			{
				return this._Statuse.Entity;
			}
			set
			{
				Statuse previousValue = this._Statuse.Entity;
				if (((previousValue != value) 
							|| (this._Statuse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Statuse.Entity = null;
						previousValue.CourseSessions.Remove(this);
					}
					this._Statuse.Entity = value;
					if ((value != null))
					{
						value.CourseSessions.Add(this);
						this._SessionStatus = value.Status;
					}
					else
					{
						this._SessionStatus = default(string);
					}
					this.SendPropertyChanged("Statuse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assigns(Assign entity)
		{
			this.SendPropertyChanging();
			entity.CourseSession = this;
		}
		
		private void detach_Assigns(Assign entity)
		{
			this.SendPropertyChanging();
			entity.CourseSession = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Institute")]
	public partial class Institute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InstituteID;
		
		private string _Name;
		
		private System.Nullable<bool> _Approved;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Course> _Courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstituteIDChanging(int value);
    partial void OnInstituteIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnApprovedChanging(System.Nullable<bool> value);
    partial void OnApprovedChanged();
    #endregion
		
		public Institute()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstituteID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int InstituteID
		{
			get
			{
				return this._InstituteID;
			}
			set
			{
				if ((this._InstituteID != value))
				{
					this.OnInstituteIDChanging(value);
					this.SendPropertyChanging();
					this._InstituteID = value;
					this.SendPropertyChanged("InstituteID");
					this.OnInstituteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approved", DbType="Bit")]
		public System.Nullable<bool> Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Institute_User", Storage="_Users", ThisKey="InstituteID", OtherKey="InstituteID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Institute_Course", Storage="_Courses", ThisKey="InstituteID", OtherKey="InstituteID")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Institute = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Institute = null;
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Institute = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Institute = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobSeekers")]
	public partial class JobSeeker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private string _City;
		
		private string _Street;
		
		private System.Nullable<int> _StreetNum;
		
		private string _District;
		
		private string _Gender;
		
		private System.Nullable<bool> _RefusedCourse;
		
		private System.Nullable<int> _ResponsibleUserID;
		
		private EntitySet<Assign> _Assigns;
		
		private EntitySet<CourseAnswer> _CourseAnswers;
		
		private EntitySet<JobSeekersAnswer> _JobSeekersAnswers;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnStreetNumChanging(System.Nullable<int> value);
    partial void OnStreetNumChanged();
    partial void OnDistrictChanging(string value);
    partial void OnDistrictChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnRefusedCourseChanging(System.Nullable<bool> value);
    partial void OnRefusedCourseChanged();
    partial void OnResponsibleUserIDChanging(System.Nullable<int> value);
    partial void OnResponsibleUserIDChanged();
    #endregion
		
		public JobSeeker()
		{
			this._Assigns = new EntitySet<Assign>(new Action<Assign>(this.attach_Assigns), new Action<Assign>(this.detach_Assigns));
			this._CourseAnswers = new EntitySet<CourseAnswer>(new Action<CourseAnswer>(this.attach_CourseAnswers), new Action<CourseAnswer>(this.detach_CourseAnswers));
			this._JobSeekersAnswers = new EntitySet<JobSeekersAnswer>(new Action<JobSeekersAnswer>(this.attach_JobSeekersAnswers), new Action<JobSeekersAnswer>(this.detach_JobSeekersAnswers));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(90)")]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetNum", DbType="Int")]
		public System.Nullable<int> StreetNum
		{
			get
			{
				return this._StreetNum;
			}
			set
			{
				if ((this._StreetNum != value))
				{
					this.OnStreetNumChanging(value);
					this.SendPropertyChanging();
					this._StreetNum = value;
					this.SendPropertyChanged("StreetNum");
					this.OnStreetNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District", DbType="NVarChar(50)")]
		public string District
		{
			get
			{
				return this._District;
			}
			set
			{
				if ((this._District != value))
				{
					this.OnDistrictChanging(value);
					this.SendPropertyChanging();
					this._District = value;
					this.SendPropertyChanged("District");
					this.OnDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(10)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefusedCourse", DbType="Bit")]
		public System.Nullable<bool> RefusedCourse
		{
			get
			{
				return this._RefusedCourse;
			}
			set
			{
				if ((this._RefusedCourse != value))
				{
					this.OnRefusedCourseChanging(value);
					this.SendPropertyChanging();
					this._RefusedCourse = value;
					this.SendPropertyChanged("RefusedCourse");
					this.OnRefusedCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponsibleUserID", DbType="Int")]
		public System.Nullable<int> ResponsibleUserID
		{
			get
			{
				return this._ResponsibleUserID;
			}
			set
			{
				if ((this._ResponsibleUserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResponsibleUserIDChanging(value);
					this.SendPropertyChanging();
					this._ResponsibleUserID = value;
					this.SendPropertyChanged("ResponsibleUserID");
					this.OnResponsibleUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobSeeker_Assign", Storage="_Assigns", ThisKey="ID", OtherKey="SeekerID")]
		public EntitySet<Assign> Assigns
		{
			get
			{
				return this._Assigns;
			}
			set
			{
				this._Assigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobSeeker_CourseAnswer", Storage="_CourseAnswers", ThisKey="ID", OtherKey="CourseID")]
		public EntitySet<CourseAnswer> CourseAnswers
		{
			get
			{
				return this._CourseAnswers;
			}
			set
			{
				this._CourseAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobSeeker_JobSeekersAnswer", Storage="_JobSeekersAnswers", ThisKey="ID", OtherKey="SeekerID")]
		public EntitySet<JobSeekersAnswer> JobSeekersAnswers
		{
			get
			{
				return this._JobSeekersAnswers;
			}
			set
			{
				this._JobSeekersAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_JobSeeker", Storage="_User", ThisKey="ResponsibleUserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.JobSeekers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.JobSeekers.Add(this);
						this._ResponsibleUserID = value.ID;
					}
					else
					{
						this._ResponsibleUserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assigns(Assign entity)
		{
			this.SendPropertyChanging();
			entity.JobSeeker = this;
		}
		
		private void detach_Assigns(Assign entity)
		{
			this.SendPropertyChanging();
			entity.JobSeeker = null;
		}
		
		private void attach_CourseAnswers(CourseAnswer entity)
		{
			this.SendPropertyChanging();
			entity.JobSeeker = this;
		}
		
		private void detach_CourseAnswers(CourseAnswer entity)
		{
			this.SendPropertyChanging();
			entity.JobSeeker = null;
		}
		
		private void attach_JobSeekersAnswers(JobSeekersAnswer entity)
		{
			this.SendPropertyChanging();
			entity.JobSeeker = this;
		}
		
		private void detach_JobSeekersAnswers(JobSeekersAnswer entity)
		{
			this.SendPropertyChanging();
			entity.JobSeeker = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobSeekersAnswers")]
	public partial class JobSeekersAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeekerID;
		
		private int _QuestionID;
		
		private System.Nullable<bool> _Answer;
		
		private EntityRef<JobSeeker> _JobSeeker;
		
		private EntityRef<MatchingQuestion> _MatchingQuestion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeekerIDChanging(int value);
    partial void OnSeekerIDChanged();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnAnswerChanging(System.Nullable<bool> value);
    partial void OnAnswerChanged();
    #endregion
		
		public JobSeekersAnswer()
		{
			this._JobSeeker = default(EntityRef<JobSeeker>);
			this._MatchingQuestion = default(EntityRef<MatchingQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeekerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SeekerID
		{
			get
			{
				return this._SeekerID;
			}
			set
			{
				if ((this._SeekerID != value))
				{
					if (this._JobSeeker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeekerIDChanging(value);
					this.SendPropertyChanging();
					this._SeekerID = value;
					this.SendPropertyChanged("SeekerID");
					this.OnSeekerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._MatchingQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="Bit")]
		public System.Nullable<bool> Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobSeeker_JobSeekersAnswer", Storage="_JobSeeker", ThisKey="SeekerID", OtherKey="ID", IsForeignKey=true)]
		public JobSeeker JobSeeker
		{
			get
			{
				return this._JobSeeker.Entity;
			}
			set
			{
				JobSeeker previousValue = this._JobSeeker.Entity;
				if (((previousValue != value) 
							|| (this._JobSeeker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobSeeker.Entity = null;
						previousValue.JobSeekersAnswers.Remove(this);
					}
					this._JobSeeker.Entity = value;
					if ((value != null))
					{
						value.JobSeekersAnswers.Add(this);
						this._SeekerID = value.ID;
					}
					else
					{
						this._SeekerID = default(int);
					}
					this.SendPropertyChanged("JobSeeker");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchingQuestion_JobSeekersAnswer", Storage="_MatchingQuestion", ThisKey="QuestionID", OtherKey="qID", IsForeignKey=true)]
		public MatchingQuestion MatchingQuestion
		{
			get
			{
				return this._MatchingQuestion.Entity;
			}
			set
			{
				MatchingQuestion previousValue = this._MatchingQuestion.Entity;
				if (((previousValue != value) 
							|| (this._MatchingQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchingQuestion.Entity = null;
						previousValue.JobSeekersAnswers.Remove(this);
					}
					this._MatchingQuestion.Entity = value;
					if ((value != null))
					{
						value.JobSeekersAnswers.Add(this);
						this._QuestionID = value.qID;
					}
					else
					{
						this._QuestionID = default(int);
					}
					this.SendPropertyChanged("MatchingQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MatchingQuestions")]
	public partial class MatchingQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _qID;
		
		private string _Question;
		
		private string _QuestionType;
		
		private System.Nullable<bool> _QuestionRelevance;
		
		private EntitySet<CourseAnswer> _CourseAnswers;
		
		private EntitySet<JobSeekersAnswer> _JobSeekersAnswers;
		
		private EntityRef<QuestionsType> _QuestionsType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnqIDChanging(int value);
    partial void OnqIDChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    partial void OnQuestionTypeChanging(string value);
    partial void OnQuestionTypeChanged();
    partial void OnQuestionRelevanceChanging(System.Nullable<bool> value);
    partial void OnQuestionRelevanceChanged();
    #endregion
		
		public MatchingQuestion()
		{
			this._CourseAnswers = new EntitySet<CourseAnswer>(new Action<CourseAnswer>(this.attach_CourseAnswers), new Action<CourseAnswer>(this.detach_CourseAnswers));
			this._JobSeekersAnswers = new EntitySet<JobSeekersAnswer>(new Action<JobSeekersAnswer>(this.attach_JobSeekersAnswers), new Action<JobSeekersAnswer>(this.detach_JobSeekersAnswers));
			this._QuestionsType = default(EntityRef<QuestionsType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int qID
		{
			get
			{
				return this._qID;
			}
			set
			{
				if ((this._qID != value))
				{
					this.OnqIDChanging(value);
					this.SendPropertyChanging();
					this._qID = value;
					this.SendPropertyChanged("qID");
					this.OnqIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question", DbType="NVarChar(200)")]
		public string Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionType", DbType="NVarChar(100)")]
		public string QuestionType
		{
			get
			{
				return this._QuestionType;
			}
			set
			{
				if ((this._QuestionType != value))
				{
					if (this._QuestionsType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionTypeChanging(value);
					this.SendPropertyChanging();
					this._QuestionType = value;
					this.SendPropertyChanged("QuestionType");
					this.OnQuestionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionRelevance", DbType="Bit")]
		public System.Nullable<bool> QuestionRelevance
		{
			get
			{
				return this._QuestionRelevance;
			}
			set
			{
				if ((this._QuestionRelevance != value))
				{
					this.OnQuestionRelevanceChanging(value);
					this.SendPropertyChanging();
					this._QuestionRelevance = value;
					this.SendPropertyChanged("QuestionRelevance");
					this.OnQuestionRelevanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchingQuestion_CourseAnswer", Storage="_CourseAnswers", ThisKey="qID", OtherKey="QuestionID")]
		public EntitySet<CourseAnswer> CourseAnswers
		{
			get
			{
				return this._CourseAnswers;
			}
			set
			{
				this._CourseAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchingQuestion_JobSeekersAnswer", Storage="_JobSeekersAnswers", ThisKey="qID", OtherKey="QuestionID")]
		public EntitySet<JobSeekersAnswer> JobSeekersAnswers
		{
			get
			{
				return this._JobSeekersAnswers;
			}
			set
			{
				this._JobSeekersAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionsType_MatchingQuestion", Storage="_QuestionsType", ThisKey="QuestionType", OtherKey="QuestionType", IsForeignKey=true)]
		public QuestionsType QuestionsType
		{
			get
			{
				return this._QuestionsType.Entity;
			}
			set
			{
				QuestionsType previousValue = this._QuestionsType.Entity;
				if (((previousValue != value) 
							|| (this._QuestionsType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionsType.Entity = null;
						previousValue.MatchingQuestions.Remove(this);
					}
					this._QuestionsType.Entity = value;
					if ((value != null))
					{
						value.MatchingQuestions.Add(this);
						this._QuestionType = value.QuestionType;
					}
					else
					{
						this._QuestionType = default(string);
					}
					this.SendPropertyChanged("QuestionsType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseAnswers(CourseAnswer entity)
		{
			this.SendPropertyChanging();
			entity.MatchingQuestion = this;
		}
		
		private void detach_CourseAnswers(CourseAnswer entity)
		{
			this.SendPropertyChanging();
			entity.MatchingQuestion = null;
		}
		
		private void attach_JobSeekersAnswers(JobSeekersAnswer entity)
		{
			this.SendPropertyChanging();
			entity.MatchingQuestion = this;
		}
		
		private void detach_JobSeekersAnswers(JobSeekersAnswer entity)
		{
			this.SendPropertyChanging();
			entity.MatchingQuestion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionsType")]
	public partial class QuestionsType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _QuestionType;
		
		private EntitySet<MatchingQuestion> _MatchingQuestions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionTypeChanging(string value);
    partial void OnQuestionTypeChanged();
    #endregion
		
		public QuestionsType()
		{
			this._MatchingQuestions = new EntitySet<MatchingQuestion>(new Action<MatchingQuestion>(this.attach_MatchingQuestions), new Action<MatchingQuestion>(this.detach_MatchingQuestions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionType", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string QuestionType
		{
			get
			{
				return this._QuestionType;
			}
			set
			{
				if ((this._QuestionType != value))
				{
					this.OnQuestionTypeChanging(value);
					this.SendPropertyChanging();
					this._QuestionType = value;
					this.SendPropertyChanged("QuestionType");
					this.OnQuestionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionsType_MatchingQuestion", Storage="_MatchingQuestions", ThisKey="QuestionType", OtherKey="QuestionType")]
		public EntitySet<MatchingQuestion> MatchingQuestions
		{
			get
			{
				return this._MatchingQuestions;
			}
			set
			{
				this._MatchingQuestions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MatchingQuestions(MatchingQuestion entity)
		{
			this.SendPropertyChanging();
			entity.QuestionsType = this;
		}
		
		private void detach_MatchingQuestions(MatchingQuestion entity)
		{
			this.SendPropertyChanging();
			entity.QuestionsType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Statuses")]
	public partial class Statuse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Status;
		
		private EntitySet<CourseSession> _CourseSessions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Statuse()
		{
			this._CourseSessions = new EntitySet<CourseSession>(new Action<CourseSession>(this.attach_CourseSessions), new Action<CourseSession>(this.detach_CourseSessions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Statuse_CourseSession", Storage="_CourseSessions", ThisKey="Status", OtherKey="SessionStatus")]
		public EntitySet<CourseSession> CourseSessions
		{
			get
			{
				return this._CourseSessions;
			}
			set
			{
				this._CourseSessions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseSessions(CourseSession entity)
		{
			this.SendPropertyChanging();
			entity.Statuse = this;
		}
		
		private void detach_CourseSessions(CourseSession entity)
		{
			this.SendPropertyChanging();
			entity.Statuse = null;
		}
	}
}
#pragma warning restore 1591
